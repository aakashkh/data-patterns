[{"body":"Data Patterns Documentation Welcome to the Data Patterns documentation! Here you’ll find comprehensive guides and examples for modern data engineering patterns, Python techniques, and analytics best practices.\nGetting Started Explore our documentation sections:\nPython: Advanced data manipulation with Pandas, performance optimization, and real-world examples SQL: Query patterns, optimization techniques, and database best practices Azure: Cloud data engineering patterns and Azure-specific implementations What You’ll Learn Modern data engineering patterns Python and Pandas advanced techniques SQL optimization and best practices Cloud analytics with Azure Performance optimization strategies Real-world data processing examples Start with any section that interests you - each guide includes practical examples and code you can run immediately.\n","categories":"","description":"","excerpt":"Data Patterns Documentation Welcome to the Data Patterns …","ref":"/data-patterns/docs/","tags":"","title":"Documentation"},{"body":"Python \u0026 Pandas Patterns This section covers practical Python patterns for data engineering and analytics, with a focus on Pandas operations, performance optimization, and real-world examples.\nWhat You’ll Learn Advanced Pandas operations Data manipulation techniques Performance optimization tips Memory-efficient processing Integration with modern tools ","categories":"","description":"Data manipulation techniques, performance optimization, and Python tricks for data engineering.\n","excerpt":"Data manipulation techniques, performance optimization, and Python …","ref":"/data-patterns/docs/python/","tags":"","title":"Python \u0026 Pandas"},{"body":"Importing Packages and Datasets import pandas as pd # Fetching data from URL as CSV by mentioning values of various parameters data = pd.read_csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\", header=None, index_col=False, names=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'iris_class']) # Unique classes of iris datasets data.iris_class.unique() Output:\narray(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'], dtype=object) Subsetting Techniques Basic Filtering data_setosa = data[data.iris_class == 'Iris-setosa'] data_versicolor = data[data.iris_class == 'Iris-versicolor'] data_virginica = data[data.iris_class == 'Iris-virginica'] Key Insights Now we can look at descriptive statistics summary for each subset and make inferences:\nEach subset is of the same size (50 records) Average Sepal and Petal Length is lowest in setosa and highest in virginica This demonstrates clear species differentiation in the dataset Descriptive Statistics Iris Setosa data_setosa.describe().T Metric count mean std min 25% 50% 75% max sepal_length 50.0 5.006 0.352490 4.3 4.800 5.0 5.200 5.8 sepal_width 50.0 3.418 0.381024 2.3 3.125 3.4 3.675 4.4 petal_length 50.0 1.464 0.173511 1.0 1.400 1.5 1.575 1.9 petal_width 50.0 0.244 0.107210 0.1 0.200 0.2 0.300 0.6 Iris Versicolor data_versicolor.describe().T Metric count mean std min 25% 50% 75% max sepal_length 50.0 5.936 0.516171 4.9 5.600 5.90 6.3 7.0 sepal_width 50.0 2.770 0.313798 2.0 2.525 2.80 3.0 3.4 petal_length 50.0 4.260 0.469911 3.0 4.000 4.35 4.6 5.1 petal_width 50.0 1.326 0.197753 1.0 1.200 1.30 1.5 1.8 Iris Virginica data_virginica.describe().T Metric count mean std min 25% 50% 75% max sepal_length 50.0 6.588 0.635880 4.9 6.225 6.50 6.900 7.9 sepal_width 50.0 2.974 0.322497 2.2 2.800 3.00 3.175 3.8 petal_length 50.0 5.552 0.551895 4.5 5.100 5.55 5.875 6.9 petal_width 50.0 2.026 0.274650 1.4 1.800 2.00 2.300 2.5 Advanced Filtering Patterns Multiple Conditions # Filter with multiple conditions large_setosa = data[(data.iris_class == 'Iris-setosa') \u0026 (data.sepal_length \u003e 5.0)] # Using query method (more readable) large_setosa_query = data.query(\"iris_class == 'Iris-setosa' and sepal_length \u003e 5.0\") Performance Tips Use vectorized operations instead of loops Chain conditions with \u0026 and | operators Use .query() for complex conditions (more readable) Consider .loc[] for label-based indexing Related Patterns Data Loading Patterns (coming soon) Indexing and Sorting (coming soon) Join Operations (coming soon) ","categories":"","description":"Learn different techniques to filter and subset pandas DataFrames efficiently","excerpt":"Learn different techniques to filter and subset pandas DataFrames …","ref":"/data-patterns/docs/python/subsetting-dataframe/","tags":"","title":"Subsetting a DataFrame in Pandas"},{"body":" Data Patterns \u0026 Modern Analytics Learn More Download Modern data engineering patterns, Python tricks, and analytics techniques!\nData Patterns provides practical examples and patterns for modern data engineering using Python, Pandas, DuckDB, and cloud technologies. From data manipulation to advanced analytics, find the patterns you need to build better data solutions. Python \u0026 Pandas Learn advanced data manipulation techniques, performance optimization tips, and real-world examples.\nModern Tools Explore DuckDB, cloud analytics, and modern data stack patterns with practical implementations.\nBest Practices Discover data engineering best practices, pipeline architectures, and monitoring strategies.\nCategories ","categories":"","description":"","excerpt":" Data Patterns \u0026 Modern Analytics Learn More Download Modern data …","ref":"/data-patterns/","tags":"","title":"Data Patterns"}]